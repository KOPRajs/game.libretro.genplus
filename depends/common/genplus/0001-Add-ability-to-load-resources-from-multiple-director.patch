From 5ba03fcdce88f9289bf9551d578bef311f717783 Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Sat, 1 Oct 2016 22:54:49 -0700
Subject: [PATCH] Add ability to load resources from multiple directories

---
 libretro/libretro.c | 64 +++++++++++++++++++++++++++++++----------------------
 libretro/libretro.h | 13 +++++++++++
 2 files changed, 51 insertions(+), 26 deletions(-)

diff --git a/libretro/libretro.c b/libretro/libretro.c
index 09a941c..b1379c9 100644
--- a/libretro/libretro.c
+++ b/libretro/libretro.c
@@ -86,6 +86,12 @@ static retro_audio_sample_batch_t audio_cb;
 /* Cheat Support */
 #define MAX_CHEATS (150)
 
+#if defined(_WIN32)
+#define SLASH_CHAR '\\'
+#else
+#define SLASH_CHAR '/'
+#endif
+
 typedef struct
 {
  bool enable;
@@ -1879,26 +1885,31 @@ void retro_cheat_set(unsigned index, bool enabled, const char *code)
    apply_cheats();
 }
 
+void set_path(char *dest, size_t maxlen, const char *rel_path)
+{
+   const char *base_dir = NULL;
+
+   /* if supported, try per-resource directory, otherwise fall back to system dir */
+   struct retro_resource res = { rel_path };
+   if (environ_cb(RETRO_ENVIRONMENT_GET_RESOURCE_DIRECTORY, &res))
+      base_dir = res.base_directory;
+   else
+      environ_cb(RETRO_ENVIRONMENT_GET_SYSTEM_DIRECTORY, &base_dir);
+
+   /* fall back to ROM directory if all else fails */
+   if (!base_dir)
+      base_dir = g_rom_dir;
+
+   snprintf(dest, maxlen, "%s%c%s", base_dir, SLASH_CHAR, rel_path);
+}
+
 bool retro_load_game(const struct retro_game_info *info)
 {
    int i;
-   const char *dir;
-#if defined(_WIN32)
-   char slash = '\\';
-#else
-   char slash = '/';
-#endif
 
    extract_directory(g_rom_dir, info->path, sizeof(g_rom_dir));
    extract_name(g_rom_name, info->path, sizeof(g_rom_name));
 
-   if (!environ_cb(RETRO_ENVIRONMENT_GET_SYSTEM_DIRECTORY, &dir) || !dir)
-   {
-      if (log_cb)
-         log_cb(RETRO_LOG_INFO, "[genplus]: Defaulting system directory to %s.\n", g_rom_dir);
-      dir = g_rom_dir;
-   }
-
    if (!environ_cb(RETRO_ENVIRONMENT_GET_SAVE_DIRECTORY, &save_dir) || !save_dir)
    {
       if (log_cb)
@@ -1906,19 +1917,20 @@ bool retro_load_game(const struct retro_game_info *info)
       save_dir = g_rom_dir;
    }
 
-   snprintf(GG_ROM, sizeof(GG_ROM), "%s%cggenie.bin", dir, slash);
-   snprintf(AR_ROM, sizeof(AR_ROM), "%s%careplay.bin", dir, slash);
-   snprintf(SK_ROM, sizeof(SK_ROM), "%s%csk.bin", dir, slash);
-   snprintf(SK_UPMEM, sizeof(SK_UPMEM), "%s%csk2chip.bin", dir, slash);
-   snprintf(MD_BIOS, sizeof(MD_BIOS), "%s%cbios_MD.bin", dir, slash);
-   snprintf(GG_BIOS, sizeof(GG_BIOS), "%s%cbios.gg", dir, slash);
-   snprintf(MS_BIOS_EU, sizeof(MS_BIOS_EU), "%s%cbios_E.sms", dir, slash);
-   snprintf(MS_BIOS_US, sizeof(MS_BIOS_US), "%s%cbios_U.sms", dir, slash);
-   snprintf(MS_BIOS_JP, sizeof(MS_BIOS_JP), "%s%cbios_J.sms", dir, slash);
-   snprintf(CD_BIOS_EU, sizeof(CD_BIOS_EU), "%s%cbios_CD_E.bin", dir, slash);
-   snprintf(CD_BIOS_US, sizeof(CD_BIOS_US), "%s%cbios_CD_U.bin", dir, slash);
-   snprintf(CD_BIOS_JP, sizeof(CD_BIOS_JP), "%s%cbios_CD_J.bin", dir, slash);
-   snprintf(CART_BRAM, sizeof(CART_BRAM), "%s%ccart.brm", save_dir, slash);
+   set_path(GG_ROM, sizeof(GG_ROM), "ggenie.bin");
+   set_path(AR_ROM, sizeof(AR_ROM), "areplay.bin");
+   set_path(SK_ROM, sizeof(SK_ROM), "sk.bin");
+   set_path(SK_UPMEM, sizeof(SK_UPMEM), "sk2chip.bin");
+   set_path(MD_BIOS, sizeof(MD_BIOS), "bios_MD.bin");
+   set_path(GG_BIOS, sizeof(GG_BIOS), "bios.gg");
+   set_path(MS_BIOS_EU, sizeof(MS_BIOS_EU), "bios_E.sms");
+   set_path(MS_BIOS_US, sizeof(MS_BIOS_US), "bios_U.sms");
+   set_path(MS_BIOS_JP, sizeof(MS_BIOS_JP), "bios_J.sms");
+   set_path(CD_BIOS_EU, sizeof(CD_BIOS_EU), "bios_CD_E.bin");
+   set_path(CD_BIOS_US, sizeof(CD_BIOS_US), "bios_CD_U.bin");
+   set_path(CD_BIOS_JP, sizeof(CD_BIOS_JP), "bios_CD_J.bin");
+
+   snprintf(CART_BRAM, sizeof(CART_BRAM), "%s%ccart.brm", save_dir, SLASH_CHAR);
 
    check_variables();
 
diff --git a/libretro/libretro.h b/libretro/libretro.h
index 16c274a..2ab79e5 100755
--- a/libretro/libretro.h
+++ b/libretro/libretro.h
@@ -852,6 +852,19 @@ enum retro_mod
                                             * It can be used by the core for localization purposes.
                                             */
 
+struct retro_resource
+{
+   const char *rel_path;
+   const char *base_directory;
+};
+
+#define RETRO_ENVIRONMENT_GET_RESOURCE_DIRECTORY 99
+                                           /* struct retro_resource * --
+                                            * Interface to acquire resource paths by a relative filename.
+                                            * 'rel_path' should be set to a filename relative to the system directory.
+                                            * 'base_directory' will be set to the base path containing the resource or NULL if unknown.
+                                            */
+
 #define RETRO_MEMDESC_CONST     (1 << 0)   /* The frontend will never change this memory area once retro_load_game has returned. */
 #define RETRO_MEMDESC_BIGENDIAN (1 << 1)   /* The memory area contains big endian data. Default is little endian. */
 #define RETRO_MEMDESC_ALIGN_2   (1 << 16)  /* All memory access in this area is aligned to their own size, or 2, whichever is smaller. */
-- 
2.7.4

